import Mathlib.Topology.ProperMap

open Filter Set
/-!
## Missing facts about proper maps
-/

-- Teach `continuity` that proper maps are continuous (by definition...)
attribute [continuity] IsProperMap.continuous

variable {X Y Z : Type*} [TopologicalSpace X] [TopologicalSpace Y] [TopologicalSpace Z]
variable {f : X ‚Üí Y} {g : Y ‚Üí Z}

/-- The composition of two proper maps is proper. -/
lemma IsProperMap.comp (hf : IsProperMap f) (hg : IsProperMap g) :
  IsProperMap (g ‚àò f) := by
  refine ‚ü®by continuity, fun ‚Ñ± z h ‚Ü¶ ?_‚ü©
  rw [MapClusterPt, ‚Üê Filter.map_map] at h
  rcases hg.clusterPt_of_mapClusterPt h with ‚ü®y, hy1, hy2‚ü©
  rcases hf.clusterPt_of_mapClusterPt hy2 with ‚ü®x, hx1, hx2‚ü©
  use x
  rw [‚Üê hy1, ‚Üê hx1]
  exact ‚ü®rfl, by assumption‚ü©

/-- If the composition of two continuous functions `g ‚àò f` is proper and `f` is surjective,
then `g` is proper. -/
lemma isProperMap_of_comp_of_surj {f : X ‚Üí Y} {g : Y ‚Üí Z} (hf : Continuous f)
    (hg : Continuous g) (hgf : IsProperMap (g ‚àò f)) (f_surj : f.Surjective) : IsProperMap g := by
  refine ‚ü®hg, fun ‚Ñ± z h ‚Ü¶ ?_‚ü©
  rcases hgf with ‚ü®_, h'‚ü©
  rw [‚Üê inf_top_eq ‚Ñ±, ‚Üê Filter.principal_univ, ‚Üê f_surj.range_eq, ‚Üê ‚Ñ±.map_comap f, MapClusterPt,
    Filter.map_map, ‚Üê MapClusterPt] at h
  rcases h' h with ‚ü®x, hx1, hx2‚ü©
  use f x
  refine ‚ü®hx1, ?_‚ü©
  apply neBot_of_comap
  apply NeBot.mono hx2
  calc
    nhds x ‚äì comap f ‚Ñ±
      ‚â§ comap f (nhds (f x)) ‚äì comap f ‚Ñ± := inf_le_inf_right (comap f ‚Ñ±) (hf.tendsto x).le_comap
    _ = comap f (nhds (f x) ‚äì ‚Ñ±) := by rw [‚Üê comap_inf]

/-- If the composition of two continuous functions `g ‚àò f` is proper and `g` is injective,
then `f` is proper. -/
lemma isProperMap_of_comp_of_inj {f : X ‚Üí Y} {g : Y ‚Üí Z} (hf : Continuous f) (hg : Continuous g)
    (hgf : IsProperMap (g ‚àò f)) (g_inj : g.Injective) : IsProperMap f := by
  refine ‚ü®hf, fun ‚Ñ± y h ‚Ü¶ ?_‚ü©
  rcases hgf with ‚ü®_, h'‚ü©
  have : MapClusterPt (g y) ‚Ñ± (g ‚àò f) := by
    apply ClusterPt.map h
    exact hg.tendsto y
    rw [‚Üê map_map, Tendsto]
  rcases h' this with ‚ü®x, hx1, hx2‚ü©
  exact ‚ü®x, g_inj hx1, hx2‚ü©

/-- If the composition of two continuous functions `f : X ‚Üí Y` and `g : Y ‚Üí Z` is proper
and `Y` is T2, then `f` is proper. -/
lemma isProperMap_of_comp_of_t2 [T2Space Y] (hf : Continuous f) (hg : Continuous g)
    (hgf : IsProperMap (g ‚àò f)) : IsProperMap f := by
  rw [isProperMap_iff_ultrafilter_of_t2]
  refine ‚ü®hf, fun ùí∞ y h ‚Ü¶ ?_‚ü©
  rw [isProperMap_iff_ultrafilter] at hgf
  rcases hgf with ‚ü®_, h'‚ü©
  have : Tendsto (g ‚àò f) ‚Üëùí∞ (nhds (g y)) := by
    rw [Tendsto, ‚Üê map_map]
    calc
      map g (map f ‚Üëùí∞) ‚â§ map g (nhds y) := map_mono h
      _                ‚â§ nhds (g y) := hg.tendsto y
  rcases h' this with ‚ü®x, _, hx‚ü©
  exact ‚ü®x, hx‚ü©

/-- An injective and continuous function is proper if and only if it is close. -/
lemma isProperMap_iff_isClosedMap_of_inj (f_cont : Continuous f) (f_inj : f.Injective) :
    IsProperMap f ‚Üî IsClosedMap f := by
  constructor
  exact fun h ‚Ü¶ h.isClosedMap
  intro h
  rw [isProperMap_iff_isClosedMap_and_compact_fibers]
  refine ‚ü®f_cont, h, ?_‚ü©
  intro y
  apply Set.Subsingleton.isCompact
  apply Set.Subsingleton.preimage subsingleton_singleton f_inj

/-- A injective continuous and closed map is proper. -/
lemma isProperMap_of_isClosedMap_of_inj (f_cont : Continuous f) (f_inj : f.Injective)
    (f_closed : IsClosedMap f) : IsProperMap f :=
  (isProperMap_iff_isClosedMap_of_inj f_cont f_inj).2 f_closed

/-- The coercion from a closed subset is proper. -/
lemma isProperMap_subtype_val_of_closed {U : Set X} (hU : IsClosed U) : IsProperMap ((‚Üë) : U ‚Üí X) :=
  isProperMap_of_isClosedMap_of_inj continuous_subtype_val Subtype.val_injective
  hU.closedEmbedding_subtype_val.isClosedMap

/-- The restriction of a proper map to a closed subset is proper. -/
lemma isProperMap_restr_of_proper_of_closed {U : Set X} (hf : IsProperMap f) (hU : IsClosed U) :
    IsProperMap (fun x : U ‚Ü¶ f x) :=
  IsProperMap.comp (isProperMap_subtype_val_of_closed hU) hf

/-- A closed embedding is proper. -/
lemma isProperMap_of_closedEmbedding (hf : ClosedEmbedding f) : IsProperMap f :=
  isProperMap_of_isClosedMap_of_inj hf.continuous hf.inj hf.isClosedMap

/-- The range of a proper map is closed. -/
lemma IsProperMap.closed_range (hf : IsProperMap f) : IsClosed (range f) :=
  hf.isClosedMap.closed_range
