import ProperAction.ProperMaps
import Mathlib.Topology.Algebra.Group.Basic
import Mathlib.Algebra.PUnitInstances

/-!
# Proper group actions
-/

set_option autoImplicit false

@[mk_iff]
class ProperVAdd (G X : Type*) [TopologicalSpace G] [TopologicalSpace X] [AddGroup G]
    [AddAction G X] : Prop where
  isProperMap_vadd_pair' : IsProperMap (fun gx ‚Ü¶ ‚ü®gx.1 +·µ• gx.2, gx.2‚ü© : G √ó X ‚Üí X √ó X)
-- isProperMap_vadd_pair' : IsProperMap (fun (g, x) ‚Ü¶ ‚ü®g +·µ• x, x‚ü© : G √ó X ‚Üí X √ó X)

@[to_additive, mk_iff]
class ProperSMul (G X : Type*) [TopologicalSpace G] [TopologicalSpace X] [Group G]
    [MulAction G X] : Prop where
  isProperMap_smul_pair' : IsProperMap (fun gx ‚Ü¶ ‚ü®gx.1 ‚Ä¢ gx.2, gx.2‚ü© : G √ó X ‚Üí X √ó X)
-- isProperMap_smul_pair' : IsProperMap (fun (g, x) ‚Ü¶ ‚ü®g ‚Ä¢ x, x‚ü© : G √ó X ‚Üí X √ó X)

@[to_additive]
lemma isProperMap_smul_pair (G X : Type*) [Group G] [MulAction G X]
    [TopologicalSpace G] [TopologicalSpace X] [ProperSMul G X] :
    IsProperMap (fun gx ‚Ü¶ ‚ü®gx.1 ‚Ä¢ gx.2, gx.2‚ü© : G √ó X ‚Üí X √ó X) :=
  ProperSMul.isProperMap_smul_pair'

#check properSMul_iff
#check properVAdd_iff

variable {G X Y : Type*} [Group G] [MulAction G X] [MulAction G Y]
variable [TopologicalSpace G] [TopologicalSpace X] [TopologicalSpace Y]

@[to_additive]
instance [ProperSMul G X] : ContinuousSMul G X where
  continuous_smul := (isProperMap_smul_pair G X).continuous.fst

/-!
### Some typical cases of proper actions
-/

open Filter Topology

theorem foo : ProperSMul G X ‚Üî (‚àÄ ‚Ñ± : Filter (G √ó X), ‚àÄ x‚ÇÅ x‚ÇÇ : X,
    ClusterPt (x‚ÇÅ, x‚ÇÇ) (map (fun gx ‚Ü¶ ‚ü®gx.1 ‚Ä¢ gx.2, gx.2‚ü© : G √ó X ‚Üí X √ó X) ‚Ñ±) ‚Üí
    ‚àÉ g : G, x‚ÇÅ = g ‚Ä¢ x‚ÇÇ ‚àß ClusterPt g (map Prod.fst ‚Ñ±)) :=
  sorry

theorem foo_ultrafilter : ProperSMul G X ‚Üî (‚àÄ ‚Ñ± : Ultrafilter (G √ó X), ‚àÄ x‚ÇÅ x‚ÇÇ : X,
    Tendsto (fun gx ‚Ü¶ ‚ü®gx.1 ‚Ä¢ gx.2, gx.2‚ü© : G √ó X ‚Üí X √ó X) ‚Ñ± (ùìù (x‚ÇÅ, x‚ÇÇ)) ‚Üí
    ‚àÉ g : G, Tendsto Prod.fst (‚Ñ± : Filter (G √ó X)) (ùìù g)) :=
  sorry

instance [ProperSMul G X] [ContinuousSMul G X]: ProperSMul G (X √ó Y) where
  isProperMap_smul_pair' := sorry

instance {Œπ : Type*} {X : Œπ ‚Üí Type*} [Œ† i, TopologicalSpace (X i)] [Œ† i, MulAction G (X i)]
    [‚àÄ i, ProperSMul G (X i)] : ProperSMul G (Œ† i, X i) where
  isProperMap_smul_pair' := sorry

instance {H : Subgroup G} [ProperSMul G X] [IsClosed (H : Set G)] : ProperSMul H X where
  isProperMap_smul_pair' := sorry

-- for the one above, we may want to use this, or some variation of it:
example {H : Type*} [Group H] [MulAction H X] [TopologicalSpace H] [ProperSMul G X]
    (f : H ‚Üí* G) (f_clemb : ClosedEmbedding f) (f_compat : ‚àÄ (h : H) (x : X), f h ‚Ä¢ x = h ‚Ä¢ x) :
    ProperSMul H X where
  isProperMap_smul_pair' := sorry

-- Some things to generalize
#check t2Space_of_properlyDiscontinuousSMul_of_t2Space
#check Subgroup.properlyDiscontinuousSMul_of_tendsto_cofinite
